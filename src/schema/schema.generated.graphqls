type Book {
  id: ID!
  isbn: String!
}

union BookResult = BookResultOk | ResultError

type BookResultOk {
  result: Book
}

union BooksResult = BooksResultOk | ResultError

type BooksResultOk {
  pagination: Pagination!
  result: [Book!]!
}

interface CharacterNode {
  id: ID!
  mostRelatedCharacter: CharacterNode
  relatedCharacters: [CharacterNode!]!
}

input CreateBookInput {
  isbn: String!
}

union CreateBookResult = CreateBookResultOk | ResultError

type CreateBookResultOk {
  result: Book!
}

scalar DateTime

type ExtraCharacter implements CharacterNode {
  creditName: String!
  id: ID!
  mostRelatedCharacter: CharacterNode
  relatedCharacters: [CharacterNode!]!
}

type Fighter implements CharacterNode & MainCharacter {
  id: ID!
  mostRelatedCharacter: CharacterNode
  powerLevel: Int!
  relatedCharacters: [CharacterNode!]!
  screenName: String!
}

interface MainCharacter {
  screenName: String!
}

type Mutation {
  createBook(input: CreateBookInput!): CreateBookResult!
  updateBook(input: UpdateBookInput!): UpdateBookResult!
}

type Pagination {
  totalPageCount: Int!
}

input PaginationInput {
  page: Int
  recordsPerPage: Int
}

type Query {
  book(id: ID!): BookResult!
  books(input: PaginationInput!): BooksResult!
  character(id: ID!): CharacterNode
  user(id: ID!): User
}

type ResultError {
  error: ResultErrorType!
}

enum ResultErrorType {
  FORBIDDEN_ERROR
  INPUT_VALIDATION_ERROR
  NOT_FOUND
  UNEXPECTED_ERROR
}

input UpdateBookInput {
  id: ID!
  isbn: String!
}

union UpdateBookResult = ResultError | UpdateBookResultOk

type UpdateBookResultOk {
  result: Book!
}

type User {
  booksRead: [Book!]!
  fullName: String!
  id: ID!
}

type Wizard implements CharacterNode & MainCharacter {
  id: ID!
  mostRelatedCharacter: CharacterNode
  relatedCharacters: [CharacterNode!]!
  screenName: String!
  spells: [String!]!
}
