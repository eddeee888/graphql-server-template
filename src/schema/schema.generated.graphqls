type Book {
  id: ID!
  isbn: String!
}

union BookPayload = BookResult | PayloadError

type BookResult {
  result: Book
}

union BooksPayload = BooksResult | PayloadError

type BooksResult {
  pagination: Pagination!
  result: [Book!]!
}

interface CharacterNode {
  id: ID!
  mostRelatedCharacter: CharacterNode
  relatedCharacters: [CharacterNode!]!
}

input CreateBookInput {
  isbn: String!
}

union CreateBookPayload = CreateBookResult | PayloadError

type CreateBookResult {
  result: Book!
}

scalar DateTime

type ExtraCharacter implements CharacterNode {
  creditName: String!
  id: ID!
  mostRelatedCharacter: CharacterNode
  relatedCharacters: [CharacterNode!]!
}

type Fighter implements CharacterNode & MainCharacter {
  id: ID!
  mostRelatedCharacter: CharacterNode
  powerLevel: Int!
  relatedCharacters: [CharacterNode!]!
  screenName: String!
}

interface MainCharacter {
  screenName: String!
}

type Mutation {
  createBook(input: CreateBookInput!): CreateBookPayload!
}

type Pagination {
  totalPageCount: Int!
}

input PaginationInput {
  page: Int
  recordsPerPage: Int
}

type PayloadError {
  error: PayloadErrorType!
}

enum PayloadErrorType {
  FORBIDDEN_ERROR
  INPUT_VALIDATION_ERROR
  NOT_FOUND
  UNEXPECTED_ERROR
}

type Query {
  book(id: ID!): BookPayload!
  books(input: PaginationInput!): BooksPayload!
  character(id: ID!): CharacterNode
  user(id: ID!): User
}

type User {
  booksRead: [Book!]!
  fullName: String!
  id: ID!
}

type Wizard implements CharacterNode & MainCharacter {
  id: ID!
  mostRelatedCharacter: CharacterNode
  relatedCharacters: [CharacterNode!]!
  screenName: String!
  spells: [String!]!
}
