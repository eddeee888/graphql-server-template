extend type Query {
  book(id: ID!): BookPayload!
  books(input: PaginationInput!): BooksPayload!
}

extend type Mutation {
  createBook(input: CreateBookInput!): CreateBookPayload!
}

type Book {
  id: ID!
  isbn: String!
}

type BookResult {
  result: Book
}

union BookPayload = BookResult | PayloadError

type BooksResult {
  result: [Book!]!
  pagination: Pagination!
}

union BooksPayload = BooksResult | PayloadError

input CreateBookInput {
  isbn: String!
}

type CreateBookResult {
  result: Book!
}

union CreateBookPayload = CreateBookResult | PayloadError

extend type User {
  booksRead: [Book!]!
}
